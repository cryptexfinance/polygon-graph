// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddedAccess extends ethereum.Event {
  get params(): AddedAccess__Params {
    return new AddedAccess__Params(this);
  }
}

export class AddedAccess__Params {
  _event: AddedAccess;

  constructor(event: AddedAccess) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AnswerUpdated extends ethereum.Event {
  get params(): AnswerUpdated__Params {
    return new AnswerUpdated__Params(this);
  }
}

export class AnswerUpdated__Params {
  _event: AnswerUpdated;

  constructor(event: AnswerUpdated) {
    this._event = event;
  }

  get current(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get roundId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get updatedAt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AvailableFundsUpdated extends ethereum.Event {
  get params(): AvailableFundsUpdated__Params {
    return new AvailableFundsUpdated__Params(this);
  }
}

export class AvailableFundsUpdated__Params {
  _event: AvailableFundsUpdated;

  constructor(event: AvailableFundsUpdated) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class CheckAccessDisabled extends ethereum.Event {
  get params(): CheckAccessDisabled__Params {
    return new CheckAccessDisabled__Params(this);
  }
}

export class CheckAccessDisabled__Params {
  _event: CheckAccessDisabled;

  constructor(event: CheckAccessDisabled) {
    this._event = event;
  }
}

export class CheckAccessEnabled extends ethereum.Event {
  get params(): CheckAccessEnabled__Params {
    return new CheckAccessEnabled__Params(this);
  }
}

export class CheckAccessEnabled__Params {
  _event: CheckAccessEnabled;

  constructor(event: CheckAccessEnabled) {
    this._event = event;
  }
}

export class NewRound extends ethereum.Event {
  get params(): NewRound__Params {
    return new NewRound__Params(this);
  }
}

export class NewRound__Params {
  _event: NewRound;

  constructor(event: NewRound) {
    this._event = event;
  }

  get roundId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get startedBy(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get startedAt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OracleAdminUpdateRequested extends ethereum.Event {
  get params(): OracleAdminUpdateRequested__Params {
    return new OracleAdminUpdateRequested__Params(this);
  }
}

export class OracleAdminUpdateRequested__Params {
  _event: OracleAdminUpdateRequested;

  constructor(event: OracleAdminUpdateRequested) {
    this._event = event;
  }

  get oracle(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get admin(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class OracleAdminUpdated extends ethereum.Event {
  get params(): OracleAdminUpdated__Params {
    return new OracleAdminUpdated__Params(this);
  }
}

export class OracleAdminUpdated__Params {
  _event: OracleAdminUpdated;

  constructor(event: OracleAdminUpdated) {
    this._event = event;
  }

  get oracle(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OraclePermissionsUpdated extends ethereum.Event {
  get params(): OraclePermissionsUpdated__Params {
    return new OraclePermissionsUpdated__Params(this);
  }
}

export class OraclePermissionsUpdated__Params {
  _event: OraclePermissionsUpdated;

  constructor(event: OraclePermissionsUpdated) {
    this._event = event;
  }

  get oracle(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get whitelisted(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class OwnershipTransferRequested extends ethereum.Event {
  get params(): OwnershipTransferRequested__Params {
    return new OwnershipTransferRequested__Params(this);
  }
}

export class OwnershipTransferRequested__Params {
  _event: OwnershipTransferRequested;

  constructor(event: OwnershipTransferRequested) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RemovedAccess extends ethereum.Event {
  get params(): RemovedAccess__Params {
    return new RemovedAccess__Params(this);
  }
}

export class RemovedAccess__Params {
  _event: RemovedAccess;

  constructor(event: RemovedAccess) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RequesterPermissionsSet extends ethereum.Event {
  get params(): RequesterPermissionsSet__Params {
    return new RequesterPermissionsSet__Params(this);
  }
}

export class RequesterPermissionsSet__Params {
  _event: RequesterPermissionsSet;

  constructor(event: RequesterPermissionsSet) {
    this._event = event;
  }

  get requester(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get authorized(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get delay(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RoundDetailsUpdated extends ethereum.Event {
  get params(): RoundDetailsUpdated__Params {
    return new RoundDetailsUpdated__Params(this);
  }
}

export class RoundDetailsUpdated__Params {
  _event: RoundDetailsUpdated;

  constructor(event: RoundDetailsUpdated) {
    this._event = event;
  }

  get paymentAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get minSubmissionCount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get maxSubmissionCount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get restartDelay(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get timeout(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class SubmissionReceived extends ethereum.Event {
  get params(): SubmissionReceived__Params {
    return new SubmissionReceived__Params(this);
  }
}

export class SubmissionReceived__Params {
  _event: SubmissionReceived;

  constructor(event: SubmissionReceived) {
    this._event = event;
  }

  get submission(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get round(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get oracle(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class ValidatorUpdated extends ethereum.Event {
  get params(): ValidatorUpdated__Params {
    return new ValidatorUpdated__Params(this);
  }
}

export class ValidatorUpdated__Params {
  _event: ValidatorUpdated;

  constructor(event: ValidatorUpdated) {
    this._event = event;
  }

  get previous(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get current(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Oracle__getRoundDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class Oracle__latestRoundDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class Oracle__oracleRoundStateResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: i32;
  value7: BigInt;

  constructor(
    value0: boolean,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: i32,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromSignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set(
      "value6",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value6))
    );
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }
}

export class Oracle extends ethereum.SmartContract {
  static bind(address: Address): Oracle {
    return new Oracle("Oracle", address);
  }

  allocatedFunds(): BigInt {
    let result = super.call("allocatedFunds", "allocatedFunds():(uint128)", []);

    return result[0].toBigInt();
  }

  try_allocatedFunds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allocatedFunds",
      "allocatedFunds():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  availableFunds(): BigInt {
    let result = super.call("availableFunds", "availableFunds():(uint128)", []);

    return result[0].toBigInt();
  }

  try_availableFunds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "availableFunds",
      "availableFunds():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkEnabled(): boolean {
    let result = super.call("checkEnabled", "checkEnabled():(bool)", []);

    return result[0].toBoolean();
  }

  try_checkEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall("checkEnabled", "checkEnabled():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  description(): string {
    let result = super.call("description", "description():(string)", []);

    return result[0].toString();
  }

  try_description(): ethereum.CallResult<string> {
    let result = super.tryCall("description", "description():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getAdmin(_oracle: Address): Address {
    let result = super.call("getAdmin", "getAdmin(address):(address)", [
      ethereum.Value.fromAddress(_oracle)
    ]);

    return result[0].toAddress();
  }

  try_getAdmin(_oracle: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("getAdmin", "getAdmin(address):(address)", [
      ethereum.Value.fromAddress(_oracle)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAnswer(_roundId: BigInt): BigInt {
    let result = super.call("getAnswer", "getAnswer(uint256):(int256)", [
      ethereum.Value.fromUnsignedBigInt(_roundId)
    ]);

    return result[0].toBigInt();
  }

  try_getAnswer(_roundId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getAnswer", "getAnswer(uint256):(int256)", [
      ethereum.Value.fromUnsignedBigInt(_roundId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOracles(): Array<Address> {
    let result = super.call("getOracles", "getOracles():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getOracles(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("getOracles", "getOracles():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getRoundData(_roundId: BigInt): Oracle__getRoundDataResult {
    let result = super.call(
      "getRoundData",
      "getRoundData(uint80):(uint80,int256,uint256,uint256,uint80)",
      [ethereum.Value.fromUnsignedBigInt(_roundId)]
    );

    return new Oracle__getRoundDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_getRoundData(
    _roundId: BigInt
  ): ethereum.CallResult<Oracle__getRoundDataResult> {
    let result = super.tryCall(
      "getRoundData",
      "getRoundData(uint80):(uint80,int256,uint256,uint256,uint80)",
      [ethereum.Value.fromUnsignedBigInt(_roundId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Oracle__getRoundDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  getTimestamp(_roundId: BigInt): BigInt {
    let result = super.call("getTimestamp", "getTimestamp(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_roundId)
    ]);

    return result[0].toBigInt();
  }

  try_getTimestamp(_roundId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTimestamp",
      "getTimestamp(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_roundId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasAccess(_user: Address, _calldata: Bytes): boolean {
    let result = super.call("hasAccess", "hasAccess(address,bytes):(bool)", [
      ethereum.Value.fromAddress(_user),
      ethereum.Value.fromBytes(_calldata)
    ]);

    return result[0].toBoolean();
  }

  try_hasAccess(
    _user: Address,
    _calldata: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasAccess", "hasAccess(address,bytes):(bool)", [
      ethereum.Value.fromAddress(_user),
      ethereum.Value.fromBytes(_calldata)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  latestAnswer(): BigInt {
    let result = super.call("latestAnswer", "latestAnswer():(int256)", []);

    return result[0].toBigInt();
  }

  try_latestAnswer(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("latestAnswer", "latestAnswer():(int256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  latestRound(): BigInt {
    let result = super.call("latestRound", "latestRound():(uint256)", []);

    return result[0].toBigInt();
  }

  try_latestRound(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("latestRound", "latestRound():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  latestRoundData(): Oracle__latestRoundDataResult {
    let result = super.call(
      "latestRoundData",
      "latestRoundData():(uint80,int256,uint256,uint256,uint80)",
      []
    );

    return new Oracle__latestRoundDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_latestRoundData(): ethereum.CallResult<Oracle__latestRoundDataResult> {
    let result = super.tryCall(
      "latestRoundData",
      "latestRoundData():(uint80,int256,uint256,uint256,uint80)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Oracle__latestRoundDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  latestTimestamp(): BigInt {
    let result = super.call(
      "latestTimestamp",
      "latestTimestamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_latestTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "latestTimestamp",
      "latestTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  linkToken(): Address {
    let result = super.call("linkToken", "linkToken():(address)", []);

    return result[0].toAddress();
  }

  try_linkToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("linkToken", "linkToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  maxSubmissionCount(): BigInt {
    let result = super.call(
      "maxSubmissionCount",
      "maxSubmissionCount():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxSubmissionCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxSubmissionCount",
      "maxSubmissionCount():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxSubmissionValue(): BigInt {
    let result = super.call(
      "maxSubmissionValue",
      "maxSubmissionValue():(int256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxSubmissionValue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxSubmissionValue",
      "maxSubmissionValue():(int256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minSubmissionCount(): BigInt {
    let result = super.call(
      "minSubmissionCount",
      "minSubmissionCount():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_minSubmissionCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minSubmissionCount",
      "minSubmissionCount():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minSubmissionValue(): BigInt {
    let result = super.call(
      "minSubmissionValue",
      "minSubmissionValue():(int256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minSubmissionValue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minSubmissionValue",
      "minSubmissionValue():(int256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  oracleCount(): i32 {
    let result = super.call("oracleCount", "oracleCount():(uint8)", []);

    return result[0].toI32();
  }

  try_oracleCount(): ethereum.CallResult<i32> {
    let result = super.tryCall("oracleCount", "oracleCount():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  oracleRoundState(
    _oracle: Address,
    _queriedRoundId: BigInt
  ): Oracle__oracleRoundStateResult {
    let result = super.call(
      "oracleRoundState",
      "oracleRoundState(address,uint32):(bool,uint32,int256,uint64,uint64,uint128,uint8,uint128)",
      [
        ethereum.Value.fromAddress(_oracle),
        ethereum.Value.fromUnsignedBigInt(_queriedRoundId)
      ]
    );

    return new Oracle__oracleRoundStateResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toI32(),
      result[7].toBigInt()
    );
  }

  try_oracleRoundState(
    _oracle: Address,
    _queriedRoundId: BigInt
  ): ethereum.CallResult<Oracle__oracleRoundStateResult> {
    let result = super.tryCall(
      "oracleRoundState",
      "oracleRoundState(address,uint32):(bool,uint32,int256,uint64,uint64,uint128,uint8,uint128)",
      [
        ethereum.Value.fromAddress(_oracle),
        ethereum.Value.fromUnsignedBigInt(_queriedRoundId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Oracle__oracleRoundStateResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toI32(),
        value[7].toBigInt()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paymentAmount(): BigInt {
    let result = super.call("paymentAmount", "paymentAmount():(uint128)", []);

    return result[0].toBigInt();
  }

  try_paymentAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "paymentAmount",
      "paymentAmount():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  requestNewRound(): BigInt {
    let result = super.call(
      "requestNewRound",
      "requestNewRound():(uint80)",
      []
    );

    return result[0].toBigInt();
  }

  try_requestNewRound(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "requestNewRound",
      "requestNewRound():(uint80)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  restartDelay(): BigInt {
    let result = super.call("restartDelay", "restartDelay():(uint32)", []);

    return result[0].toBigInt();
  }

  try_restartDelay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("restartDelay", "restartDelay():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  timeout(): BigInt {
    let result = super.call("timeout", "timeout():(uint32)", []);

    return result[0].toBigInt();
  }

  try_timeout(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("timeout", "timeout():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  validator(): Address {
    let result = super.call("validator", "validator():(address)", []);

    return result[0].toAddress();
  }

  try_validator(): ethereum.CallResult<Address> {
    let result = super.tryCall("validator", "validator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  version(): BigInt {
    let result = super.call("version", "version():(uint256)", []);

    return result[0].toBigInt();
  }

  try_version(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("version", "version():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawablePayment(_oracle: Address): BigInt {
    let result = super.call(
      "withdrawablePayment",
      "withdrawablePayment(address):(uint256)",
      [ethereum.Value.fromAddress(_oracle)]
    );

    return result[0].toBigInt();
  }

  try_withdrawablePayment(_oracle: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawablePayment",
      "withdrawablePayment(address):(uint256)",
      [ethereum.Value.fromAddress(_oracle)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _link(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _paymentAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _timeout(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _validator(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _minSubmissionValue(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _maxSubmissionValue(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _decimals(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get _description(): string {
    return this._call.inputValues[7].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptAdminCall extends ethereum.Call {
  get inputs(): AcceptAdminCall__Inputs {
    return new AcceptAdminCall__Inputs(this);
  }

  get outputs(): AcceptAdminCall__Outputs {
    return new AcceptAdminCall__Outputs(this);
  }
}

export class AcceptAdminCall__Inputs {
  _call: AcceptAdminCall;

  constructor(call: AcceptAdminCall) {
    this._call = call;
  }

  get _oracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AcceptAdminCall__Outputs {
  _call: AcceptAdminCall;

  constructor(call: AcceptAdminCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall extends ethereum.Call {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AddAccessCall extends ethereum.Call {
  get inputs(): AddAccessCall__Inputs {
    return new AddAccessCall__Inputs(this);
  }

  get outputs(): AddAccessCall__Outputs {
    return new AddAccessCall__Outputs(this);
  }
}

export class AddAccessCall__Inputs {
  _call: AddAccessCall;

  constructor(call: AddAccessCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddAccessCall__Outputs {
  _call: AddAccessCall;

  constructor(call: AddAccessCall) {
    this._call = call;
  }
}

export class ChangeOraclesCall extends ethereum.Call {
  get inputs(): ChangeOraclesCall__Inputs {
    return new ChangeOraclesCall__Inputs(this);
  }

  get outputs(): ChangeOraclesCall__Outputs {
    return new ChangeOraclesCall__Outputs(this);
  }
}

export class ChangeOraclesCall__Inputs {
  _call: ChangeOraclesCall;

  constructor(call: ChangeOraclesCall) {
    this._call = call;
  }

  get _removed(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _added(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _addedAdmins(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get _minSubmissions(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _maxSubmissions(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _restartDelay(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class ChangeOraclesCall__Outputs {
  _call: ChangeOraclesCall;

  constructor(call: ChangeOraclesCall) {
    this._call = call;
  }
}

export class DisableAccessCheckCall extends ethereum.Call {
  get inputs(): DisableAccessCheckCall__Inputs {
    return new DisableAccessCheckCall__Inputs(this);
  }

  get outputs(): DisableAccessCheckCall__Outputs {
    return new DisableAccessCheckCall__Outputs(this);
  }
}

export class DisableAccessCheckCall__Inputs {
  _call: DisableAccessCheckCall;

  constructor(call: DisableAccessCheckCall) {
    this._call = call;
  }
}

export class DisableAccessCheckCall__Outputs {
  _call: DisableAccessCheckCall;

  constructor(call: DisableAccessCheckCall) {
    this._call = call;
  }
}

export class EnableAccessCheckCall extends ethereum.Call {
  get inputs(): EnableAccessCheckCall__Inputs {
    return new EnableAccessCheckCall__Inputs(this);
  }

  get outputs(): EnableAccessCheckCall__Outputs {
    return new EnableAccessCheckCall__Outputs(this);
  }
}

export class EnableAccessCheckCall__Inputs {
  _call: EnableAccessCheckCall;

  constructor(call: EnableAccessCheckCall) {
    this._call = call;
  }
}

export class EnableAccessCheckCall__Outputs {
  _call: EnableAccessCheckCall;

  constructor(call: EnableAccessCheckCall) {
    this._call = call;
  }
}

export class OnTokenTransferCall extends ethereum.Call {
  get inputs(): OnTokenTransferCall__Inputs {
    return new OnTokenTransferCall__Inputs(this);
  }

  get outputs(): OnTokenTransferCall__Outputs {
    return new OnTokenTransferCall__Outputs(this);
  }
}

export class OnTokenTransferCall__Inputs {
  _call: OnTokenTransferCall;

  constructor(call: OnTokenTransferCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class OnTokenTransferCall__Outputs {
  _call: OnTokenTransferCall;

  constructor(call: OnTokenTransferCall) {
    this._call = call;
  }
}

export class RemoveAccessCall extends ethereum.Call {
  get inputs(): RemoveAccessCall__Inputs {
    return new RemoveAccessCall__Inputs(this);
  }

  get outputs(): RemoveAccessCall__Outputs {
    return new RemoveAccessCall__Outputs(this);
  }
}

export class RemoveAccessCall__Inputs {
  _call: RemoveAccessCall;

  constructor(call: RemoveAccessCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveAccessCall__Outputs {
  _call: RemoveAccessCall;

  constructor(call: RemoveAccessCall) {
    this._call = call;
  }
}

export class RequestNewRoundCall extends ethereum.Call {
  get inputs(): RequestNewRoundCall__Inputs {
    return new RequestNewRoundCall__Inputs(this);
  }

  get outputs(): RequestNewRoundCall__Outputs {
    return new RequestNewRoundCall__Outputs(this);
  }
}

export class RequestNewRoundCall__Inputs {
  _call: RequestNewRoundCall;

  constructor(call: RequestNewRoundCall) {
    this._call = call;
  }
}

export class RequestNewRoundCall__Outputs {
  _call: RequestNewRoundCall;

  constructor(call: RequestNewRoundCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetRequesterPermissionsCall extends ethereum.Call {
  get inputs(): SetRequesterPermissionsCall__Inputs {
    return new SetRequesterPermissionsCall__Inputs(this);
  }

  get outputs(): SetRequesterPermissionsCall__Outputs {
    return new SetRequesterPermissionsCall__Outputs(this);
  }
}

export class SetRequesterPermissionsCall__Inputs {
  _call: SetRequesterPermissionsCall;

  constructor(call: SetRequesterPermissionsCall) {
    this._call = call;
  }

  get _requester(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _authorized(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get _delay(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetRequesterPermissionsCall__Outputs {
  _call: SetRequesterPermissionsCall;

  constructor(call: SetRequesterPermissionsCall) {
    this._call = call;
  }
}

export class SetValidatorCall extends ethereum.Call {
  get inputs(): SetValidatorCall__Inputs {
    return new SetValidatorCall__Inputs(this);
  }

  get outputs(): SetValidatorCall__Outputs {
    return new SetValidatorCall__Outputs(this);
  }
}

export class SetValidatorCall__Inputs {
  _call: SetValidatorCall;

  constructor(call: SetValidatorCall) {
    this._call = call;
  }

  get _newValidator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetValidatorCall__Outputs {
  _call: SetValidatorCall;

  constructor(call: SetValidatorCall) {
    this._call = call;
  }
}

export class SubmitCall extends ethereum.Call {
  get inputs(): SubmitCall__Inputs {
    return new SubmitCall__Inputs(this);
  }

  get outputs(): SubmitCall__Outputs {
    return new SubmitCall__Outputs(this);
  }
}

export class SubmitCall__Inputs {
  _call: SubmitCall;

  constructor(call: SubmitCall) {
    this._call = call;
  }

  get _roundId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _submission(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SubmitCall__Outputs {
  _call: SubmitCall;

  constructor(call: SubmitCall) {
    this._call = call;
  }
}

export class TransferAdminCall extends ethereum.Call {
  get inputs(): TransferAdminCall__Inputs {
    return new TransferAdminCall__Inputs(this);
  }

  get outputs(): TransferAdminCall__Outputs {
    return new TransferAdminCall__Outputs(this);
  }
}

export class TransferAdminCall__Inputs {
  _call: TransferAdminCall;

  constructor(call: TransferAdminCall) {
    this._call = call;
  }

  get _oracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _newAdmin(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class TransferAdminCall__Outputs {
  _call: TransferAdminCall;

  constructor(call: TransferAdminCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateAvailableFundsCall extends ethereum.Call {
  get inputs(): UpdateAvailableFundsCall__Inputs {
    return new UpdateAvailableFundsCall__Inputs(this);
  }

  get outputs(): UpdateAvailableFundsCall__Outputs {
    return new UpdateAvailableFundsCall__Outputs(this);
  }
}

export class UpdateAvailableFundsCall__Inputs {
  _call: UpdateAvailableFundsCall;

  constructor(call: UpdateAvailableFundsCall) {
    this._call = call;
  }
}

export class UpdateAvailableFundsCall__Outputs {
  _call: UpdateAvailableFundsCall;

  constructor(call: UpdateAvailableFundsCall) {
    this._call = call;
  }
}

export class UpdateFutureRoundsCall extends ethereum.Call {
  get inputs(): UpdateFutureRoundsCall__Inputs {
    return new UpdateFutureRoundsCall__Inputs(this);
  }

  get outputs(): UpdateFutureRoundsCall__Outputs {
    return new UpdateFutureRoundsCall__Outputs(this);
  }
}

export class UpdateFutureRoundsCall__Inputs {
  _call: UpdateFutureRoundsCall;

  constructor(call: UpdateFutureRoundsCall) {
    this._call = call;
  }

  get _paymentAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _minSubmissions(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _maxSubmissions(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _restartDelay(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _timeout(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class UpdateFutureRoundsCall__Outputs {
  _call: UpdateFutureRoundsCall;

  constructor(call: UpdateFutureRoundsCall) {
    this._call = call;
  }
}

export class WithdrawFundsCall extends ethereum.Call {
  get inputs(): WithdrawFundsCall__Inputs {
    return new WithdrawFundsCall__Inputs(this);
  }

  get outputs(): WithdrawFundsCall__Outputs {
    return new WithdrawFundsCall__Outputs(this);
  }
}

export class WithdrawFundsCall__Inputs {
  _call: WithdrawFundsCall;

  constructor(call: WithdrawFundsCall) {
    this._call = call;
  }

  get _recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawFundsCall__Outputs {
  _call: WithdrawFundsCall;

  constructor(call: WithdrawFundsCall) {
    this._call = call;
  }
}

export class WithdrawPaymentCall extends ethereum.Call {
  get inputs(): WithdrawPaymentCall__Inputs {
    return new WithdrawPaymentCall__Inputs(this);
  }

  get outputs(): WithdrawPaymentCall__Outputs {
    return new WithdrawPaymentCall__Outputs(this);
  }
}

export class WithdrawPaymentCall__Inputs {
  _call: WithdrawPaymentCall;

  constructor(call: WithdrawPaymentCall) {
    this._call = call;
  }

  get _oracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawPaymentCall__Outputs {
  _call: WithdrawPaymentCall;

  constructor(call: WithdrawPaymentCall) {
    this._call = call;
  }
}
